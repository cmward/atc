$acid_voice:
sun state six six two
| qantas three three six
| virgin [blue] seven six two
| sun state two five (zero | oh) (zero | oh)
| eastern (nine | niner) three two
| rex four eight one
| sun state two one five four
| [victor hotel] bravo kilo sierra
| aussie three one two
| qantas five (zero | oh) two
| qantas one six seven
| qantas one five (zero | oh)
| virgin [blue] four (nine | niner) three
| qantas two five
| eastern two one (zero | oh) two
| qantas one seven two three
| sun state three four five
| virgin [blue] five two five
| qantas five one three
| [air] new zealand two three
| jet star one four two (zero | oh)
| sun state five three three
| eastern eight (zero | oh) eight
| [victor hotel] charlie zulu hotel
| qantas one two three
| jet star one one eight
| qantas four (nine | niner)
| jet star four eight six
| virgin [blue] eight (zero | oh) (zero | oh)
| virgin [blue] (zero | oh) (zero | oh) four
| eastern one one (zero | oh)
| qantas one (zero | oh) eight eight
| jet star eight seven
| virgin [blue] two (zero | oh) one
| [victor hotel] echo xray bravo
| jet star (nine | niner) eight two
| [air] new zealand two two one
| [air] new zealand six eight eight two
| virgin [blue] three three eight
| virgin [blue] three seven five
| qantas six one one
| virgin [blue] two four four
| sun state four five six
| rex one five three
| jet star five seven two
| virgin [blue] seven four (nine | niner)
| [air] new zealand seven one eight
| aussie eight six eight
| qantas five five one
| [victor hotel] tango alpha alpha
| (november | twin cessna | cessna) [seven two] two papa whiskey
;
$acid_manual:
sun state six six two
| qantas three three six
| virgin [blue] seven six two
| sun state two five (zero | oh) (zero | oh)
| eastern (nine | niner) three two
| rex four eight one
| sun state two one five four
| [victor hotel] bravo kilo sierra
| aussie three one two
| qantas five (zero | oh) two
| qantas one six seven
| qantas one five (zero | oh)
| virgin [blue] four (nine | niner) three
| qantas two five
| eastern two one (zero | oh) two
| qantas one seven two three
| sun state three four five
| virgin [blue] five two five
| qantas five one three
| [air] new zealand two three
| jet star one four two (zero | oh)
| sun state five three three
| eastern eight (zero | oh) eight
| [victor hotel] charlie zulu hotel
| qantas one two three
| jet star one one eight
| qantas four (nine | niner)
| jet star four eight six
| virgin [blue] eight (zero | oh) (zero | oh)
| virgin [blue] (zero | oh) (zero | oh) four
| eastern one one (zero | oh)
| qantas one (zero | oh) eight eight
| jet star eight seven
| virgin [blue] two (zero | oh) one
| [victor hotel] echo xray bravo
| jet star (nine | niner) eight two
| [air] new zealand two two one
| [air] new zealand six eight eight two
| virgin [blue] three three eight
| virgin [blue] three seven five
| qantas six one one
| virgin [blue] two four four
| sun state four five six
| rex one five three
| jet star five seven two
| virgin [blue] seven four (nine | niner)
| [air] new zealand seven one eight
| aussie eight six eight
| qantas five five one
| [victor hotel] tango alpha alpha
| (november | twin cessna | cessna) [seven two] two papa whiskey
;
#
# customized full acid with correction
#
<gram> "carriers.hg";
$custom_acid :
[$noise] [$wrong_acid correction] $acid_voice [heavy];
$wrong_acid : $carriers [($nt_digit | $nt_phonetic) ($nt_digit | $nt_phonetic) [($nt_digit | $nt_phonetic) [$nt_digit | $nt_phonetic]]];
$carriers :
american
| air canada
| alaska
| alaska air
| speedbird
| continental
| com air
| delta
| exec jet
| fedex
| flex jet
| jet blue
| options
| reach
| southwest
| tag
| t bird
;
# atvoice exceptions
# &0 insert a +
# &1 insert a /
# &2 insert a @
# &3 insert a _
# &4 put a . after p instead of space (see &2)
# &5 insert a space
# &6 insert a ;
# &7 insert a ~
# &8 insert a ! to indicate voice response should be supressed
# &9 insert a ^
#
<start> $atc;
<dict> "dfs.hd";
<dict> "navaids.hd"; # site specific data
<dict> "carriers.hd"; # carriers specific data
<dict> "garbage.hd" ;
<dict> "user_dictionary.hd" ;
<gram> "acid.hg"; # generated by atvgen
<gram> "acid_full.hg";
<gram> "frequency.hg"; # generated by atvgen
<gram> "facility.hg"; # site specific data
<gram> "navdata.hg";
<gram> "navaid.hg"; # site specific data
<gram> "runway.hg"; # runway data, to be generated by atvgen
<gram> "sid_star.hg"; # sid data, to be generated by atvgen
<gram> "garbage.hg";
<gram> "digits.hg";
<gram> "level.hg";
<gram> "speed.hg";
<gram> "dfs_phraseology.hg";
$atc :
$voice_cmd
| $manual_cmd
| [last] aircraft calling say again
| station calling [in | $facs] say again
| say again [please]
| negative
| (pause | freeze) exercise
| (resume | start) exercise
| terminate exercise
| roger
;
$manual_cmd :
[$noise] $acid_manual $garbage
| $wrong_acid correction $acid_manual $garbage
;
$voice_cmd :
$custom_acid [$initial_ident]
( [correction | disregard [(previous | last) clearance] | negative] [$silence] $clearance |
[disregard | negative] |
repeat last transmission )
| [simulation command] drop target $acid_voice
;
$initial_ident:
($greeting | $controller_id | [is | your | you are] identified )+
;
$clearance :
($single_clearance | [$first_phrases] ([$silence] $multi_clearance)+ [$ending_phrase])
;
$multi_clearance:
$altitude_cmd
| $heading_cmd
| $speed_cmd
| $when_do_cmd
| $cross_cmd
| $route_cmd
| $sid_star_cmd
| $hold_cmd
| $approach_cmd
| $ident_cmd
| $report_cmd
| $request_cmd
| $notify_cmd
| $special_procedures_cmd
;
### altitude ####
$altitude_cmd:
$climb_descend
| continue (climb | descent) [to] ($flight_level | [altitude] $height feet)
| (climb | descend) [to] $level expedite (climb | descent) (to | through | until passing) $level
| expedite [your] (climb | descent) (to | through | until passing) $level
| expedite [your] (climb | descent)
| [continue] (climb | descend ) $level at (given | assigned) rate
| continue (climb | descend) ( (on [pilots] | own) discretion | own convenience | own rate )
| resume (own | normal) rate [of (descend | climb) ]
| (own | normal) rate of (descend | climb)
| stop [your] (climb | descent) [at] $level
| stop [your] (climb | descent) (now | immediately)
| cleared to operate between $level and $level
| [new | revised ] [ $airport] qnh [is] $pressure
| $climb_descend_rate
;
$climb_descend:
[on pilots discretion | when ready | [at] own convenience | initially ]
((descend | climb ) [and maintain] | maintain) [$nt_level correction ] $level [ [on | at] [[ $airport] qnh] $pressure]
[ on [pilots] discretion | own convenience | it will be your cruising level | immediately | own rate |
still cleared | report at [level | flight level | $nt_level]] [report leaving]
;
$climb_descend_level:
(descend | climb) [and maintain] [$nt_level correction ] $level
;
$climb_descend_fl:
(descend | climb) [and maintain] [$nt_flight_level correction ] $flight_level
;
$climb_descend_alt:
(descend | climb) [and maintain] [[altitude] $nt_height correction ] [altitude] $height
;
$climb_descend_pressure:
(descend | climb) [and maintain] [altitude] $height [on | at] [[ $airport] qnh] $pressure
;
$climb_descend_rate:
((maintain | increase | reduce) [rate of (climb | descend)] | [[continue | rate of] (climb | descend)])
[at] $alt_rate feet (per | a) minute
( | or (more | greater) | or (less | smaller) | exactly )
;
### end altitude ####
### heading ####
$heading_cmd:
[$hdg_change_reason ] (fly | pick up | continue [[$nt_lr] turn | on ] | cleared) heading [ $nt_heading correction [heading]] $heading
[$hdg_change_reason | still cleared]
| [when airborne | $hdg_change_reason ] turn [further] [$nt_lr correction [turn]] $lr [immediately] [long way around] heading
[$nt_heading correction [heading]] $heading [immediately] [$hdg_change_reason | still cleared ]
| [$hdg_change_reason] suggest $lr turn heading $heading [$hdg_change_reason]
| fly heading $heading [to] intercept $navaid
| [when airborne] turn $lr [immediately] heading $heading [immediately] [to] intercept $navaid
| (make | start) a $lr hand orbit [at [your] present position]
| (orbit | circle) [to the] $lr
| (make | perform | do) a $lr three sixty
| (make | perform) [a] three sixty to the $lr
| (continue | maintain) [on] (present | downwind) heading [until advised]
| [for identification] turn $lr [immediately] [by] $rel_heading degrees [immediately] [report new heading ]
| turn $rel_heading degrees to the $lr
| stop turn ( heading $heading | [now])
;
### end heading ####
### speed ####
$speed_cmd:
(increase | reduce) [[speed] ( $nt_knot [knots] | [to] $nt_mach) correction]
[indicated] [[air] speed] ( $knot knots | [to] $mach) [ indicated ]
| (increase | reduce) [your] [air] speed [by] $relspeed
| speed $speed knots [ indicated ]
| speed ( $knot knots | $mach) or greater
| speed ( $knot knots | $mach ) or less
| (maintain | resume) (own | normal) speed
| no [atc] speed restrictions
| high speed [is] approved
| maintain [your] maximum forward speed
| (maintain | reduce) minimum approach speed
| maintain (present | current) speed
| (maintain | continue) [present | current] speed (exactly | or greater | or less)
| (maintain | continue) high speed [ as long as possible due to priority flight behind you]
| (maintain | continue | reduce [to] ) (minimum clean speed | speed minimum clean)
| (maintain | continue | fly) [at least] [[speed] ( $nt_knot [knots] | [to] $nt_mach) correction]
[indicated] [[air] speed] ( $knot knots | $mach)
[indicated] [exactly] [until $navaid]
## + for or less and _ for or greater
| (maintain | increase | continue | fly ) [at least] [[speed] ( $nt_knot [knots] | [to] $nt_mach) correction]
[indicated] [[air] speed] ( $knot knots | $mach)
[indicated] or (greater | more) [until $navaid]
| (maintain | reduce | continue | fly ) [at least] [[speed] ( $nt_knot [knots] | [to] $nt_mach) correction]
[indicated] [[air] speed] ( $knot knots | $mach )
[indicated] or less [until $navaid]
| maintain [speed] $knot knots or (greater | less) until [passing] [the] outer marker
| (maintain [speed] | speed) $knot knots or (greater | less) until [passing] $distance (mile | miles) final
| maintain [speed] $knot knots until [passing] [the] outer marker
| reduce [speed] $knot knots maintain until [passing] [the] outer marker
| (reduce | increase) [speed] $knot knots [indicated] [and] maintain until [passing] $distance (mile | miles) final
| maintain (present | current) speed until passing the outer marker
;
### end speed ####
### when_do ####
$when_do_cmd:
(after [passing | reaching] | [when] (passing | reaching) ) $navaid
( (clear | cleared) ils [approach] [runway] $runway |
(intercept | join | clear | cleared ) [for] [the] localizer [runway] $runway |
(climb | descend) [to] $level |
( (fly | proceed | cleared | set heading) [direct ] [to] | direct [to] | to ) [$noise] $navaid |
(proceed | cleared) [direct ] [to] [$noise] $navaid [$noise] $navaid |
continue present heading |
resume own rate |
( (fly | maintain | reduce) [speed] | speed) ( $knot knots or (greater | less) |
$mach or (greater | less) |
( $knot knots | $mach) ) |
reduce [to] (minimum clean speed | speed minimum clean) )
| when ( passing | at) heading $heading
| [when] established on localizer [reduce] speed $knot knots
| [when] [fully] established [reduce] speed $knot knots
| [when] at ( $flight_level | altitude $height | $height feet )
| [continue] $climb_descend_fl
( [when] (at level | reaching) |
[$silence] $climb_descend_rate [when] (at level | reaching) )
| [continue] $climb_descend_alt
( [when] (at level | reaching) |
[$silence] $climb_descend_rate [when] (at level | reaching) )
| (descend | climb) [altitude] $height [on | at] [qnh] $pressure
( [when] (at level | reaching) |
[$silence] $climb_descend_rate [when] (at level | reaching) )
| ($climb_descend [$climb_descend_rate] | $climb_descend_rate | (climb | descend) $level at (given | assigned) rate ) until (
(passing | reaching ) $flight_level
| (passing | reaching) [altitude] $height)
| ([$climb_descend] | $climb_descend $climb_descend_rate)
( [when | after] (
(passing | reaching ) $flight_level |
(passing | reaching ) (altitude $height | $height feet) ) |
out of ( $flight_level | [altitude] $height ) )
;
### end when_do ####
### cross ####
$cross_cmd:
[to] cross $navaid
( ( at or above | above | at or below | below | [at]) $level |
[at] $level or ( above | below) )
# [to] cross $navaid ( at or above | above | at or below | below | [at]) $level
# | [to] cross $navaid [at] $level or ( above | below)
| [([on] pilots | own) discretion | when ready | own convenience ] (climb | descend)
( (to (reach | cross) $level (by | at) $navaid |
$level [to] (reach | cross) $navaid at [level]) |
to (reach | cross) $navaid at $level |
$level (fly | proceed) [direct ] [to] [$noise] $navaid [to] (reach | cross) $navaid at [level] |
$level [to] cross $distance [nautical] miles (prior | before | of) $navaid at [level] )
#define cross point with distance from existing fix
# | cross $distance [nautical] miles [dme | gnss] (prior | before | of) $navaid
# ( ( at | above | below | at or above | at or below) $level |
# [at] $level or ( above | below) )
| cross $distance [nautical] miles [dme | gnss] (prior | before | of) $navaid
( ( at | above | below | at or above | at or below) $level |
[at] $level or ( above | below) )
#define cross point with distance and direction from existing fix
| cross $distance [nautical] miles $direction (prior | before | of) $navaid at $level
;
### end cross ####
### route ####
$route_cmd:
[from present position | when able] (cleared | recleared | proceed | continue | fly | set heading)
(direct [to] | inbound | to) [$noise] $navaid
| (direct [to] | cleared | proceed) [$noise] $navaid
| [proceed | fly] direct $distance [nautical] miles (prior | before) [$noise] $navaid
| turn $lr [long way around] [(direct [to] | inbound [to] | to)] [$noise] $navaid
| [continue] $lr turn ((direct | inbound) [to] | to) [$noise] $navaid
| turn $lr [(inbound [to] | direct [to] | to | proceed)] [$noise] $navaid [(then | thereafter) [to]] [$noise] $navaid ( flight planned route | )
| direct [$noise] $navaid [then | and] [$noise] $navaid
| (cleared | recleared | proceed | fly) [direct | to | inbound]
( ([$noise] $navaid)+ [then [to] | thereafter | and] [$noise] $navaid |
[$noise] $navaid via ([and] [$noise] $navaid)+ |
([$noise] $navaid)+ [then [to] | thereafter | and] [$noise] $navaid flight planned route |
waypoint $waypoint |
(waypoint | waypoints ) $waypoint $waypoint )
| turn $lr waypoint $waypoint
| [proceed] from [waypoint] $waypoint to $waypoint
| turn $lr [proceed | direct] (waypoint | waypoints ) $waypoint $waypoint
| after $navaid (proceed | cleared | recleared ) [to] $navaid via $navaid
| [radar vectoring terminated] (resume | cleared) own navigation (inbound | to) $navaid
| resume (own | normal) navigation
| ( (when | after) [passing] | depart | leave ) $navaid ([fly] | [turn] $lr [to]) heading $heading
| proceed [direct] $distance (mile | miles) final runway $runway
;
### end route ####
### sid_star ####
$sid_star_cmd:
cleared $star (transition | arrival [route]) ( | and profile)
| ((cleared | proceed | turn | fly) | turn $lr )
[to | direct [to | waypoint]] [$noise] $waypoint
[thereafter] [follow | cleared | join] $star (transition | arrival [route])
| cleared $star (transition | arrival [route]) proceed [direct [waypoint]] $waypoint
| join $star (transition | arrival [route]) at $waypoint at $level [descend at own (convenience | discretion)]
| disregard $star (transition | arrival [route])
| cleared $sid transition
;
### end sid_star ####
### hold ####
$hold_cmd:
(enter | cleared) [$nt_navaid correction ] $holding holding [report established]
| hold [at | over] [$hold_correction] $holding until $time
| hold [at | over | overhead ]
[$hold_correction] $holding ( $hold_lr_turn | $hold_12_min)* [[is] approved | until further advice]
[report established]
| hold (at | over) [position] $distance [nautical] miles $deg_direction
(from | of | to) [$nt_navaid correction [from | of | to]] $navaid ( $hold_lr_turn | $hold_12_min)* [[is] approved]
| hold [at | over | overhead] [$hold_correction] $navaid ( inbound track [is | heading] $heading | (radial | course) $radial) [degrees]
[ $hold_lr_turn] [ $hold_12_min] [[is] approved] [report established]
| hold (at | over | overhead ) [$hold_correction] $navaid
(at | maintain | climb | descend) $level
inbound track [heading] $heading [degrees]
[ $hold_lr_turn $hold_12_min] [[is] approved] [report established]
| $climb_descend_level ( (enter | cleared ) $holding holding | hold (at | over | overhead) [$hold_correction] $holding )
([at] $nt_level | at ) [report (entering | established)]
| hold (at | over | overhead ) $holding [at] $level ( outbound time (one | two) (minute | minutes) | )
[report (entering | established)]
# | hold (at | over | overhead ) $holding [at] $level [report (entering | established)]
# | hold (at | over | overhead ) $holding $level outbound time (one | two) (minute | minutes)
# [report (entering | established)]
| expect holding (at | over | overhead) [$hold_correction] $holding
| after (completing | completion of) holding proceed (direct [to] | to) [$noise] $navaid [ [then] [to] [$noise] $navaid]
| (disregard | discontinue) (hold | holding)
;
$hold_lr_turn: turns $lr | $lr hand pattern | $lr (turn | turns)
;
$hold_12_min: (one | two) (minute | minutes) pattern
;
$hold_correction: $nt_navaid correction [at | over | overhead ]
;
### end hold ####
### approach ####
$approach_cmd:
[out of $nt_navaid | on present heading | to] (intercept | join | clear | cleared ) [for] [the]
( localizer (dme | ) [runway] $runway [report established] |
(ils | ils yankee ) [approach] [runway] $runway
[[followed by] circling runway $runway | report established] |
standard ils [approach] [runway] $runway
[[followed by] circling runway $runway | report established] |
ndb dme [approach] [runway] $runway report beacon outbound )
| (intercept | join | clear | cleared ) [for] [the]
( (vor
| vor dme
| ndb
| ndb dme
| dme
| tacan
| gps
| lda
| rnav [visual] ) |
standard (vor
| vor dme
| ndb
| ndb dme
| dme
| tacan
| gps
| lda
| rnav [visual] ) )
[approach] [runway] $runway
[[followed by] circling runway $runway]
| [out of $nt_navaid] cleared ils [approach] [runway] $runway
( $level on the glide [path] [qnh $pressure] | qnh $pressure $level on the glide [path])
| go around
| cleared standard missed approach [ procedure ] [runway $nt_runway]
| maintain $level (until | under) (glide [path] [interception | intercept] | intercepting glide path)
| leave [altitude] $height on [the] glide [path]
| (clear | cleared) visual approach runway $runway
| expect [radar] vectors [for] [(ils | vor | dme | visual) approach] [runway] $runway
| (expect | vectoring | vectors) [for [the]]
(localizer | ils | dme | vor | gps | ndb | rnav | lda | visual | straight_in)
[approach] [runway] $runway
;
### end approach ####
### ident ####
$ident_cmd:
squawk (ident |
standby |
para |
vfr |
military vfr |
mode sierra |
[mode] charlie |
(emergency | may day | code seven seven zero zero) |
mode three alpha only )
| confirm squawk $code
| [how] do you read [me]
| radio check
| [altitude indicates $nt_level] ((turn | switch) on | recycle | reset ) [[your] mode] charlie
| [when airborne ] squawk $code [and ident]
| (recycle | reset ) squawk $code [[and] ident]
| (stop (squawk | squawking) | switch off) [mode] charlie [wrong indication]
| stop squawk
| mode charlie appears to be unserviceable
| radar contact [$nt_navaid]
;
### end ident ####
### report ####
$report_cmd:
report ([your] indicated airspeed
| [your] [indicated] speed
| [your] mach number
| [present] (flight level | altitude)
| [present | your] rate of (climb | descent)
| heading and (altitude | flight level)
| heading passing
| [flight] level passing
| reaching $level
| (reaching | [when]) level
| (leaving | vacating ) $level
| passing $level
| (overhead | passing) $navaid
| next (fix | waypoint)
| (runway | field) in sight )
| report [your] maximum ([air] speed
| mach number
| [flight] level
| rate of (climb | descent) )
| (confirm | report) [your] (
(assigned | cleared) (level | altitude) |
minimum clean speed |
requested ([flight] level | altitude) |
requested $level |
[present] heading |
squawk )
| (state | report ) [your] position
| report established [on [the]] (localizer | ils | glideslope | glide path | gbas | final track | mls approach course ) [runway $nt_runway]
| report (localizer | ils | glideslope | glide path | gbas | final track | mls approach course ) established
| report established
| report on final track
| report (established in the (hold | holding) | entering [the] holding | holding established)
;
### end report ####
### request ####
$request_cmd:
confirm maintaining $level
| [in case of reclearance] are you able to (
cross $navaid [at] $level [or (below | above)] |
(cross | reach) $level overhead $navaid |
( (keep | maintain) [[a] rate of] [climb] | climb at)
$alt_rate feet (per | a) minute [or (greater | less )] until (passing | reaching) $level |
descend at $alt_rate feet (per | a) minute [or (greater | less )] |
maintain own separation [to mentioned traffic] )
| (are you able for | can you accept) (higher level | $level)
| are you able for ( $knot [knots] | $mach)
| (report | what is) [the | your] (highest | maximum) [flight] level [[which] you can reach]
( (over | overhead) $navaid | $distance [nautical] miles (prior | before) $navaid)
;
### end request ####
### notify ####
$notify_cmd:
[check [new]] information $phonetic
| information $phonetic [is] (correct | valid | current)
| current information [is] $phonetic
| due [to ] traffic
| clear of [mentioned] traffic
| no reported traffic
| calling for descent in $range miles
| correction
| (expect [[radar] vector] | vectoring) [to | for ] $nt_navaid
| [expect [vectoring]] runway [ in use ] ( $runway_in_use | $runway ) [nonstandard]
| [revised] (expected approach time | e. a. t.) [at] $time
| expect [further] clearance [at] $time
| ifr [flight] cancelled [at] [time] $time
| frequency change approved
| remain [on] this frequency
| maintain own separation [ to mentioned traffic [caution wake turbulence] | (to | from) [preceding] $actype | and (v. m. c. | victor mike charlie ) ]
| [requested] $nt_level [is] (not available | blocked) (can you accept | are you interested in) $level [ or $nt_level]
| requested [flight] level approved
| wind ($nt_heading degrees [at] $nt_digit [$nt_digit] [knots] | calm)
| you will intercept ([$nt_distance [nautical] miles $nt_direction (from | of ) ] $nt_navaid |
[ils | final [track]] $nt_distance miles (from | of) touchdown)
| closing from $nt_lr
| (standby for | advise able to accept) visual approach runway $runway
| visual departure runway $nt_runway approved turn $nt_lr ([heading] $nt_heading | [direct] [to] $nt_navaid)
[maintain visual reference to [the] terrain until $nt_level]
| advise able [to accept] visual departure ( [direct] [to | until] $nt_navaid | [until] $nt_level)
| visibility [is] $nt_digit [$nt_digit] (kilometer | kilometers | meters)
| caution wake turbulence [following $actype | on [short] [final] [runway] $nt_runway]
| flight level blocked
| position (over | abeam) $nt_navaid
| radar (control | service) terminated
| atc service terminated
| will shortly lose identification
| maintain victor mike charlie
# | intercept $navaid
| if unable advise
| advise if unable
| $nt_level will be [your] (final | holding | cruising) level
| expect ( late descend | downwind)
| expect [further] (climb | descend ) in $nt_distance miles
| no delay [expected]
| [you are | your] number $nt_digit to land
| number $nt_digit (in sequence | for approach)
| [standby] [i] call you back [for (higher | lower)]
| [until] $nt_distance miles [to | from] touchdown
| $nt_distance miles to (fly | go)
| expect ($nt_direction | southern | northern | eastern | western) downwind
| expect $nt_lr hand pattern
| expect intercept from [the] $nt_direction
| [you are] going through the localizer
| i will take you through the (localizer | final | ils)
| expect ($nt_distance miles | short | long) final
| expect short approach
;
### end notify ####
### special procedures ####
$special_procedures_cmd:
#parachute jumping procedure:
report ready to drop
| dropping approved
| report last jumper out
| descend approved
| report (clear of | leaving) airspace charlie
| (approved to enter airspace charlie | entering airspace charlie approved) climb $level [$nt_direction of ($nt_navaid | dropping area)]
| climb $level [$nt_direction of ($nt_navaid | dropping area)] (approved to enter airspace charlie | entering airspace charlie approved)
| climb $level $nt_direction of ($nt_navaid | dropping area)
#ifr
| report able to cancel ifr [ below $level]
| report ready to copy [ifr (clearance | pickup)]
| [you [are] | you're] cleared to $navaid via ((radar vectors [[fly | turn $nt_lr] heading] | heading) $heading | $navaid [ [and] $navaid] [ flight planned route])
(climb | descend | maintain) $level ifr starts ( now | [when] passing $level)
| ils clearance cancelled | disregard ils clearance
#aircpace crossing
| [you are] (enter | entering | leaving) airspace (charlie | delta)
| leave airspace (charlie | delta) (heading $nt_heading | at $nt_level | $nt_direction)
| (crossing airspace charlie | airspace charlie crossing) approved [via | direct] $navaid [[to | direct] $navaid] [at] $level
;
### special procedures ####
### frequency ###
$transfer_freq_phrases:
[when ready ] contact ($facility [on] [frequency] $nt_frequency correction $frequency | $facility_on_frequency)
| (at $time | (at | over) $navaid) contact
($facility [on] [frequency] $nt_frequency correction $frequency | $facility_on_frequency)
| report [your] (speed | heading | rate of (descend | climb) ) to
( $facility [on] [frequency] $nt_frequency correction $frequency | $facility_on_frequency)
| contact ($facility [on] [frequency] $nt_frequency correction $frequency | $facility_on_frequency) callsign only
;
### end frequency ###
$single_clearance:
[mentioned] traffic [information ] [[now] [in] your] $clock [ [range] $nt_range miles] $garbage
| unable traffic [information ] $clock [ [range] $range miles] $garbage
| [roger] [$nt_distance miles to touchdown] $transfer_freq_phrases [$bye]
| approved
| say again [please]
| standby
| go ahead
| pass your message
| state request
| roger
| [roger | [ifr cancelled] squawk vfr | descend approved ] approved to leave frequency
| $ending_phrase
;
$first_phrases:
affirm
| roger [an | and]
;
$ending_phrase:
go around $garbage
| hold (at | over | overhead ) $holding $level $garbage
| hold (at | over | overhead) $holding $level outbound time (one | two) (minute | minutes) $garbage
| delay not determined $garbage
| (localizer | ils | dme | vor | gps | ndb | rnav | lda | visual [approach])
not available due to $garbage
| expect vector across $garbage
| this turn will take you through $garbage
| taking you through $garbage
| unable to accept cancellation [due to $garbage]
| $nt_level not available [due to $garbage] (alternative is | alternatives are) $nt_level [ or $nt_level]
;
$greeting :
good (morning | afternoon | day)
| hello | gutentag | servus
;
$bye: good (bye | day) | bye bye;
$hdg_change_reason:
(for (spacing | separation | downwind | base [leg] | final | delay | identification | sequencing | (localizer | vor | dme) approach )
| due [to] [conflicting] traffic | long way around)
;
$minutes:
$d19 | $d15 $digit
;
$nt_minutes:
$nt_d19 | $nt_d15 $nt_digit
;
$distance :
( [one | two ] $digit $digit | $d19)
;
$nt_distance :
( [one | two ] $nt_digit $nt_digit | $nt_d19)
;
$clock :
(one | two | three | four | five | six |
seven | eight | nine | niner | ten | eleven |
twelve) oclock
;
$deg_direction :
north | northeast | east | southeast | south | southwest |
west | northwest | north northeast | east northeast | east southeast |
south southeast | south southwest | west southwest | west northwest | north northwest
;
$nt_direction :
north | northeast | east | southeast | south | southwest |
west | northwest | north northeast | east northeast | east southeast |
south southeast | south southwest | west southwest | west northwest | north northwest
;
$direction :
north | northeast | east | southeast | south | southwest |
west | northwest | north northeast | east northeast | east southeast |
south southeast | south southwest | west southwest | west northwest | north northwest
;
$level :
$flight_level | [altitude] $height
;
$nt_level :
$nt_flight_level | [altitude] $nt_height
;
$alt_rate :
$d39 hundred | $d16 thousand [$d19 hundred]
;
$rel_heading :
five | ten | fifteen | twenty | twenty five |
thirty | thirty five | forty | forty five | fifty |
fifty five | sixty | sixty five | seventy | seventy five |
eighty | eighty five | ninety | ninety five |
$d19 (zero | five)
;
#
# 005_360 in increments of five
#
$heading:
($d02 $digit | three $d05) (zero | five)
| three six zero | (one | two | three) hundred
| north | east | south | west
;
# heading: 3 digits, 000_360 by 5's
$nt_heading:
($nt_d02 $nt_digit | three $nt_d05) (zero | five)
| three six zero | (one | two | three) hundred
| north | east | south | west
;
# radial: 3 digits, 000_360
$radial:
($d02 $digit | three $d05) $digit
| three six zero
;
$nt_radial:
($nt_d02 $nt_digit | three $nt_d05) $nt_digit
| three six zero
;
$code :
$octal $octal $octal $octal
| one thousand
;
$pressure :
($millibars | $inches)
;
$millibars :
(nine | niner) (eight | nine | niner) $digit
| one zero $d03 $digit
| one thousand
| triple (nine | niner)
;
$inches :
((two (seven eight | nine | niner)) | (three (zero | one | two | three))) (decimal | point) $digit $digit inches
;
#
# range _ 01 mile to 19 miles
#
$range :
($two_digit | one $digit)
;
$nt_range :
([one] $nt_digit)
;
$time :
((zero | one) $digit
| two (zero | one | two | three)
)
(zero | one | two | three | four [five] | five)
$digit
;
$nt_time :
((zero | one) $digit
| two (zero | one | two | three)
)
(zero | one | two | three | four [five] | five)
$nt_digit
;
#
# general definitions
#
$two_digit :
one | two | three | four | five | six
| seven | eight | nine | niner
;
$lr :
left | right
;
$nt_lr :
left | right
;
$controller_id : $controller_facility ;
$navaid : $point_w_type ;
$nt_navaid : $nt_point_w_type ;
#$fix : $navaid ;
$noise : _noise_ | _silence_ ;
$silence : _silence_ ;
#### airspace data #####
$actype :
[heavy] ((airbus | a) (three (hundred | zero zero | ten | one zero |
nineteen | one nine | twenty | two zero | thirty | three zero |
forty | four zero)) |
a t r |
[boeing] (seven one seven | seven seventeen |
seven (three | thirty) seven | seven (four | forty) seven |
seven (five | fifty) seven | seven (six | sixty) seven |
seven seven seven | triple seven) |
(beech | beechcraft) |
[(beech | beechcraft)] (nineteen hundred | b e (ninety | nine zero | thirty | three zero) |
[super] king air | [super] king air (ninety | nine zero | thirty | three zero)) |
challenger |
[twin] cessna |
[[twin] cessna] (one (seven | seventy) two | skyhawk | two o eight | two zero eight | caravan | three (ten | one zero) |
four o two | four zero two) |
citation |
[(cessna | citation)] (five ((two | twenty) five | (five | six | seven) (fifty | five zero | sixty | six zero)) | jet |
ten | x | regional jet) |
[douglas] d c (eight | (nine | niner) | ten | one zero) |
dash eight |
(embraer | e) one (thirty | three | forty | four ) five |
f (two | twenty) seven | friendship |
falcon [(ten | one zero | fifty | five zero)] |
h (two | twenty) five | hawker | hawker jet |
l j (two | twenty) five | (lear [jet] | l j) [(twenty | two | thirty | three) five] |
m d (eleven | one one | eighty | eight zero) |
[piper] (aerostar | p a (two | twenty) eight | warrior | archer | arrow | cadet |
cruiser | dakota | p a (three | thirty) four) |
seneca |
(s f | saab) (thirty four | three forty))
;
<gram> "single_digits.hg";
#######################################################
## tagged:
#######################################################
#ranges:
$digit : $n0 | $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7 | $n8 | $n9
;
$d02 : $n0 | $n1 | $n2
;
$d03 : $n0 | $n1 | $n2 | $n3
;
$d04 : $n0 | $n1 | $n2 | $n3 | $n4
;
$d05 : $n0 | $n1 | $n2 | $n3 | $n4 | $n5
;
$d06 : $n0 | $n1 | $n2 | $n3 | $n4 | $n5 | $n6
;
$d07 : $n0 | $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7
;
$d12 : $n1 | $n2
;
$d13 : $n1 | $n2 | $n3
;
$d14 : $n1 | $n2 | $n3 | $n4
;
$d15 : $n1 | $n2 | $n3 | $n4 | $n5
;
$d16 : $n1 | $n2 | $n3 | $n4 | $n5 | $n6
;
$d17 : $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7
;
$d18 : $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7 | $n8
;
$d19 : $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7 | $n8 | $n9
;
$d112 : $n1 | $n2 | $n3 | $n4 | $n5 | $n6 | $n7 | $n8 | $n9 | $n10 | $n11 | $n12
;
$d25 : $n2 | $n3 | $n4 | $n5
;
$d39 : $n3 | $n4 | $n5 | $n6 | $n7 | $n8 | $n9
;
$d59 : $n5 | $n6 | $n7 | $n8 | $n9
;
$d69 : $n6 | $n7 | $n8 | $n9
;
$d79 : $n7 | $n8 | $n9
;
$octal : $d07;
$nt_octal : $nt_d07;
$digit_teens: $n10 | $n11 | $n12 | $n13 | $n14 | $n15 | $n16 | $n17 | $n18 | $n19
;
$tens : $n10 | $n20 | $n30 | $n40 | $n50 | $n60 | $n70 | $n80 | $n90
;
$single_tens:
twenty | thirty | forty | fifty | sixty | seventy
| eighty | ninety
;
# this is from 10,000 to 17,000 feet
$grouptens: $n10 | $n11 | $n12 | $n13 | $n14 | $n15 | $n16 | $n17
;
$digitpair : $d19 $digit | $digit_teens | ($tens | $single_tens $d19)
;
$phonetic : (alpha | bravo | charlie | delta | echo | foxtrot |
golf | hotel | india | juliet | kilo | lima | mike |
november | oscar | papa | quebec | romeo | sierra |
tango | uniform | victor | whiskey | xray | yankee | zulu)
;
#######################################################
### not tagged:
#######################################################
# ranges:
$nt_digit : $nt0 | $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7 | $nt8 | $nt9
;
$nt_d02 : $nt0 | $nt1 | $nt2
;
$nt_d03 : $nt0 | $nt1 | $nt2 | $nt3
;
$nt_d04 : $nt0 | $nt1 | $nt2 | $nt3 | $nt4
;
$nt_d05 : $nt0 | $nt1 | $nt2 | $nt3 | $nt4 | $nt5
;
$nt_d06 : $nt0 | $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6
;
$nt_d07 : $nt0 | $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7
;
$nt_d12 : $nt1 | $nt2
;
$nt_d13 : $nt1 | $nt2 | $nt3
;
$nt_d14 : $nt1 | $nt2 | $nt3 | $nt4
;
$nt_d15 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5
;
$nt_d16 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6
;
$nt_d17 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7
;
$nt_d18 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7 | $nt8
;
$nt_d19 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7 | $nt8 | $nt9
;
$nt_d112 : $nt1 | $nt2 | $nt3 | $nt4 | $nt5 | $nt6 | $nt7 | $nt8 | $nt9 | $nt10 | $nt11 | $nt12
;
$nt_d25 : $nt2 | $nt3 | $nt4 | $nt5
;
$nt_d39 : $nt3 | $nt4 | $nt5 | $nt6 | $nt7 | $nt8 | $nt9
;
$nt_d59 : $nt5 | $nt6 | $nt7 | $nt8 | $nt9
;
$nt_d69 : $nt6 | $nt7 | $nt8 | $nt9
;
$nt_d79 : $nt7 | $nt8 | $nt9
;
$nt_single_tens: $nt20 | $nt30 | $nt40 | $nt50 | $nt60 | $nt70 | $nt80 | $nt90
;
$nt_tens: $nt10 | $nt20 | $nt30 | $nt40 | $nt50 | $nt60 | $nt70 | $nt80 | $nt90
;
$nt_digit_teens : $nt10 | $nt11 | $nt12 | $nt13 | $nt14 | $nt15 | $nt16 | $nt17 | $nt18 | $nt19
;
# this is from 10,000 to 17,000 feet
$nt_grouptens : $nt10 | $nt11 | $nt12 | $nt13 | $nt14 | $nt15 | $nt16 | $nt17
;
$nt_digitpair : $nt_d19 $nt_digit | $nt_digit_teens | $nt_tens | $nt_single_tens $nt_d19
;
$nt_phonetic : alpha | bravo | charlie | delta | echo | foxtrot | golf | hotel | india |
juliet | kilo | lima | mike | november | oscar | papa | quebec | romeo |
sierra | tango | uniform | victor | whiskey | xray | yankee | zulu
;
$number : number $nt_digit
;
$frequency :
one two five (point | decimal) two
| one one eight (point | decimal) seven five
| one two six (point | decimal) one five
| one two zero (point | decimal) eight
| one one (nine | niner) (point | decimal) (nine | niner)
| one two seven (point | decimal) zero five
| one two seven (point | decimal) five
| one two four (point | decimal) four two
| one two four (point | decimal) seven two
| one two four (point | decimal) (nine | niner)
| one two seven (point | decimal) seven two
| one two four (point | decimal) four seven
| one two four (point | decimal) three seven
| one three two (point | decimal) three two
| one three five (point | decimal) six five
| one three two (point | decimal) zero seven
;
$nt_frequency :
one two five (point | decimal) two
| one one eight (point | decimal) seven five
| one two six (point | decimal) one five
| one two zero (point | decimal) eight
| one one (nine | niner) (point | decimal) (nine | niner)
| one two seven (point | decimal) zero five
| one two seven (point | decimal) five
| one two four (point | decimal) four two
| one two four (point | decimal) seven two
| one two four (point | decimal) (nine | niner)
| one two seven (point | decimal) seven two
| one two four (point | decimal) four seven
| one two four (point | decimal) three seven
| one three two (point | decimal) three two
| one three five (point | decimal) six five
| one three two (point | decimal) zero seven
;
$facility_on_frequency:
bremen [radar] [on]
( (one two three (point | decimal) two two five ) |
(one two six (point | decimal) four two five ) |
(one three six (point | decimal) four five zero ) |
(one two six (point | decimal) six five zero ) )
| innsbruck [radar] [on]
( one one (nine | niner) (point | decimal) two seven five )
| langen [radar] [on]
( (one two seven (point | decimal) seven two five ) |
(one three four (point | decimal) two ) |
(one two four (point | decimal) four two five ) |
(one one (nine | niner) (point | decimal) two ) |
(one two zero (point | decimal) five seven five ) |
(one two five (point | decimal) two ) |
(one three one (point | decimal) three ) |
(one two five (point | decimal) zero five zero ) )
| linz [radar] [on]
(one two (nine | niner) (point | decimal) six two five )
| maastricht [radar] [on]
(one three four (point | decimal) seven one zero )
| padua [radar] [on]
( (one three three (point | decimal) five one five ) |
(one three three (point | decimal) seven zero five ) |
(one two seven (point | decimal) three eight zero ) |
(one two zero (point | decimal) seven two five ) |
(one three two (point | decimal) eight six zero ) )
| prague [radar] [on]
( (one three two (point | decimal) zero six five ) |
(one three five (point | decimal) one three five ) |
(one three three (point | decimal) three (nine | niner) zero ) |
(one three three (point | decimal) five three zero ) |
(one two zero (point | decimal) two seven five ))
| rhine [radar] [on]
( (one two six (point | decimal) two six five ) |
(one three three (point | decimal) eight three five ) |
(one three three (point | decimal) two eight zero ) |
(one three three (point | decimal) eight one five ) |
(one two eight (point | decimal) two three five ) |
(one three two (point | decimal) four zero five ) |
(one three four (point | decimal) zero six five ) |
(one three six (point | decimal) four zero five ) |
(one three four (point | decimal) zero eight five ) |
(one three three (point | decimal) two eight five ) |
(one three three (point | decimal) eight six zero ) )
| salzburg [radar] [on]
(one two three (point | decimal) seven two five )
| swiss [radar] [on]
( (one three four (point | decimal) six zero five ) |
(one one (nine | niner) (point | decimal) (nine | niner) two five ) |
(one three two (point | decimal) eight one five ) |
(one three three (point | decimal) zero five zero ) |
(one three two (point | decimal) eight three five ) |
(one three three (point | decimal) (nine | niner) ) |
(one three three (point | decimal) four zero five ) )
| vienna [radar] [on]
( (one three one (point | decimal) three five zero ) |
(one three three (point | decimal) six ) |
(one two (nine | niner) (point | decimal) two ) |
(one three two (point | decimal) (nine | niner) five zero ) |
(one two eight (point | decimal) seven ) |
(one two six (point | decimal) two eight zero ) |
(one one (nine | niner) (point | decimal) eight eight zero ) |
(one two (nine | niner) (point | decimal) one two five ) )
| warshaw [radar] [on]
( (one three four (point | decimal) two two zero ) |
(one three four (point | decimal) eight seven five ))
;
# sample use of $garbage subgrammar.
# dan halbert, bbn, january 2006.
#hark format
## start of grammar.
#<dict> "garbage.hd";
#<gram> "garbage.hg";
#hark format
# phoneme loop to match anything.
# use with garbage.hd
# dan halbert, bbn, january, 2006.
$garbage:
( _phone_iy_
| _phone_ih_
| _phone_ey_
| _phone_ei_
| _phone_eh_
| _phone_ae_
| _phone_aa_
| _phone_oh_
| _phone_ah_
| _phone_ao_
| _phone_uh_
| _phone_uw_
| _phone_ax_
| _phone_ix_
| _phone_er_
| _phone_axr_
| _phone_ow_
| _phone_aw_
| _phone_ay_
| _phone_oy_
| _phone_y_
| _phone_w_
| _phone_r_
| _phone_l_
| _phone_m_
| _phone_n_
| _phone_nx_
| _phone_p_
| _phone_t_
| _phone_dx_
| _phone_k_
| _phone_b_
| _phone_d_
| _phone_g_
| _phone_hh_
| _phone_f_
| _phone_th_
| _phone_s_
| _phone_sh_
| _phone_v_
| _phone_dh_
| _phone_z_
| _phone_zh_
| _phone_ch_
| _phone_jh_
| _phone_silence_
)*
;
$height: ( ($d19 hundred )
| ( ( $d16 ) thousand [ $d19 hundred ] )
| ( ( seven ) thousand ))[ feet ] ;
$flight_level: flight level ( ( [ zero ] $d59 zero )
| ($d12 hundred | $d12 $digit zero )
| ( [zero] six five)) ;
$nt_height: ( ($nt_d19 hundred )
| ( ( $nt_d17 ) thousand [ $nt_d19 hundred ] )
| ( ( eight ) thousand ))[ feet ] ;
$nt_flight_level: flight level ( ( [ zero ] $nt_d69 zero )
| ($nt_d12 hundred | $nt_d12 $nt_digit zero )
| ( [zero] six five )) ;
$height: ( ($d19 hundred )
| ( ( $d16 ) thousand [ $d19 hundred ] )
| ( ( seven ) thousand ))[ feet ] ;
$flight_level: flight level ( ( [ zero ] $d59 zero )
| ($d15 hundred | $d15 $digit zero )
| ( six hundred | six zero zero )) ;
$nt_height: ( ($nt_d19 hundred )
| ( ( $nt_d17 ) thousand [ $nt_d19 hundred ] )
| ( ( eight ) thousand ))[ feet ] ;
$nt_flight_level: flight level ( ( [ zero ] $nt_d69 zero )
| ($nt_d15 hundred | $nt_d15 $nt_digit zero )
| ( six hundred | six zero zero )) ;
#
# site specific variables
#
$facs: (munich | muenchen | rhein | rhine | bremen | berlin | langen | frankfurt) [radar | center | director] | radar | center | arrival | director
| berlin [arrival | departure] | arrival | departure
;
$adjfacs: (frankfurt | langen | rhein | rhine | donau | ingo | vienna | swiss | padua | stuttgart) [radar]
| linz | salzburg | eggenfelden | echo golf golf | straubing | munich | muenchen
| bremen [radar] | warschau | warsaw | warszawa | muenchen [radar] | munich [radar] | rhein [radar]
| maastricht | magdeburg [info] | cochstedt [tower]
| cottbus [drewitz] [info] | drewitz [info] | holzdorf [arrival | radar | tower]
| radar | arrival [north | south] | departure [north | south] | director | tower [north | south] | info
| (langen | rhein | rhine | swiss | praha | munich | muenchen | maastricht | lippe | warsaw | bremen | copenhagen ) [radar]
| sweden control
;
$facility : ($facs | $adjfacs)
# (approach [control] | departure [control] | arrival | final | tower | center | area control | [radar] )
;
# identity for this controller position _ all any combination of facilty name and type
$controller_facility : $facs
# [(approach [control] | departure [control] | center | area control | radar )]
;
$approach_fix:
betos
| landu
| rokil
| napsa
| ridar
| renlo
| vamas
| buram
| bixel
;
$approach_fix_proceed:
magat
| begen
| gudeg
| nelbi
| graz
;
$nt_approach_fix_proceed:
magat
| begen
| gudeg
| nelbi
| graz
;
#$navaid :
# $vhf
# | $intersections
# | $airport
# | $approach_fix_proceed
# | $ndb
# | $waypoint
#;
#$nt_navaid :
# $nt_vhf
# | $nt_intersections
# | $nt_airport
# | $nt_approach_fix_proceed
# | $nt_ndb
# | $nt_waypoint
#;
$airway:
victor (
one (zero | oh) four
| one (zero | oh) six
| one thirty nine
| one forty one
| one fifty one
| one sixty seven
| two
| two twenty nine
| two sixty eight
| three
| three twenty two
| thirty nine
| four thirty one
| four ninety
| ninety three
| four ninety six
) [airway] ;
$runway :
two six
| two six (left | right)
| [zero] eight (left | right)
;
$nt_runway :
two six [left | right]
| [zero] eight (left | right)
;
$runway_in_use :
two six
| [zero] eight
;
#
# fixes _ navaid.hg
#
#
$ndb : stub
;
$ndb_w_type: $ndb [ n. d. b. | beacon ]
;
$nt_ndb : stub
;
$nt_ndb_w_type: $nt_ndb [ n. d. b. | beacon ]
;
$vhf :
( arpe | alpha romeo papa)
| (allersberg | alpha lima bravo)
| (charlie | charlie hotel alpha)
| (cola | charlie oscar lima)
| (diekirch |delta india kilo)
| (dinkelsbuehl | delta kilo bravo)
| (erlangen | echo romeo lima)
| (frankfurt [vor] | foxtrot foxtrot mike)
| (fritzlar | foxtrot tango zulu)
| (fulda | foxtrot uniform lima)
| (giebelstadt | golf bravo lima)
| (gedern | golf echo delta)
| (giessen | golf india november)
| (hammelburg | hotel alpha bravo)
| (hanau | hotel november uniform)
| (kirn | kilo india romeo)
| (koenig | kilo november golf)
| (langen | lima golf november)
| (lima | lima mike alpha)
| (luburg | lima bravo uniform)
| (mansbach | mike bravo alpha)
| (metro | mike tango romeo)
| (mike | mike india quebec)
| (nekar | november kilo romeo)
| (neuburg | november echo uniform)
| (nattenheim | november tango mike)
| (noerdlingen | november delta golf)
| (spessart | papa sierra alpha)
| (ramstein | romeo mike sierra)
| (ried | romeo india delta)
| (ruedesheim | romeo uniform delta)
| (saarbruecken | sierra bravo november)
| (taunus | tango alpha uniform)
| (tango | tango golf oscar)
| (trasadingen | tango romeo alpha)
| (walda | whiskey alpha lima)
| (wiesbaden | whiskey bravo delta)
| (warburg | whiskey romeo bravo)
| (wuerzburg | whiskey uniform romeo)
;
$vhf_w_type: $vhf
;
$nt_vhf :
( arpe | alpha romeo papa)
| (allersberg | alpha lima bravo)
| (charlie | charlie hotel alpha)
| (cola | charlie oscar lima)
| (diekirch |delta india kilo)
| (dinkelsbuehl | delta kilo bravo)
| (erlangen | echo romeo lima)
| (frankfurt [vor] | foxtrot foxtrot mike)
| (fritzlar | foxtrot tango zulu)
| (fulda | foxtrot uniform lima)
| (giebelstadt | golf bravo lima)
| (gedern | golf echo delta)
| (giessen | golf india november)
| (hammelburg | hotel alpha bravo)
| (hanau | hotel november uniform)
| (kirn | kilo india romeo)
| (koenig | kilo november golf)
| (langen | lima golf november)
| (lima | lima mike alpha)
| (luburg | lima bravo uniform)
| (mansbach | mike bravo alpha)
| (metro | mike tango romeo)
| (mike | mike india quebec)
| (nekar | november kilo romeo)
| (neuburg | november echo uniform)
| (nattenheim | november tango mike)
| (noerdlingen | november delta golf)
| (spessart | papa sierra alpha)
| (ramstein | romeo mike sierra)
| (ried | romeo india delta)
| (ruedesheim | romeo uniform delta)
| (saarbruecken | sierra bravo november)
| (taunus | tango alpha uniform)
| (tango | tango golf oscar)
| (trasadingen | tango romeo alpha)
| (walda | whiskey alpha lima)
| (wiesbaden | whiskey bravo delta)
| (warburg | whiskey romeo bravo)
| (wuerzburg | whiskey uniform romeo)
;
$nt_vhf_w_type: $nt_vhf
;
$waypoint:
delta mike zero two five
| delta mike zero five five
| delta mike zero five three
| delta mike zero five seven
| delta mike zero six four
| delta mike four five five
| delta mike four five eight
| delta mike four five nine
| delta mike four four eight
| delta mike four four nine
| delta mike four two five
| delta mike four two eight
| delta mike four two nine
| delta mike four three nine
| delta mike four three eight
;
$waypoint_w_type: $waypoint
;
$nt_waypoint:
delta mike zero two five
| delta mike zero five five
| delta mike zero five three
| delta mike zero five seven
| delta mike zero six four
| delta mike four five five
| delta mike four five eight
| delta mike four five nine
| delta mike four four eight
| delta mike four four nine
| delta mike four two five
| delta mike four two eight
| delta mike four two nine
| delta mike four three nine
| delta mike four three eight
;
$nt_waypoint_w_type: $nt_waypoint
;
$intersections:
abaxa
| akoni
| anela
| banik
| dinku
| eccho
| elmid
| epino
| harem
| kulok
| modau
| noras
| rudus
| ruwer
| sigen
| sugit
| swalm
| valar # end of dfs frankfurt fixset
;
$intersections_w_type: $intersections
;
$nt_intersections:
abaxa
| akoni
| anela
| banik
| dinku
| eccho
| elmid
| epino
| harem
| kulok
| modau
| noras
| rudus
| ruwer
| sigen
| sugit
| swalm
| valar
;
$nt_intersections_w_type: $nt_intersections
;
#
#
# many of the airports are already listed as vors so they are not added
# here
#
$airport :
frankfurt
| duesseldorf
| bremen
| hamburg
| muenchen
| bonn
| stuttgart
| saarbruecken
| tempelhof
| kassel
;
$airport_w_type: $airport [ airport ]
;
$nt_airport :
frankfurt
| duesseldorf
| bremen
| hamburg
| muenchen
| bonn
| stuttgart
| saarbruecken
| tempelhof
| kassel
;
$nt_airport_w_type: $nt_airport [ airport ]
;
$vor :
charlie
| wuerzburg
;
$vor_w_type: $vor [ v. o. r. ]
;
$nt_vor :
charlie
| wuerzburg
;
$nt_vor_w_type: $nt_vor [ v. o. r. ]
;
$dme :
buechel
| giebelstadt
| luburg
| ried
;
$dme_w_type: $dme [ d. m. e. ]
;
$nt_dme :
aspat
| giebelstadt
| luburg
| ried
;
$nt_dme_w_type: $nt_dme [ d. m. e. ]
;
$holding :
mike
| spessart
;
$holding_w_type: $holding
;
$nt_holding :
mike
| spessart
;
$nt_holding_w_type: $nt_holding
;
$approach :
magat
| begen
| gudeg
| nelbi
| graz
;
$approach_w_type: $approach
;
$nt_approach : stub
magat
| begen
| gudeg
| nelbi
| graz
;
$nt_approach_w_type: $nt_approach
;
$point :
$waypoint
| $vor
| $dme
| $ndb
| $airport
| $holding
| $approach
| $intersections
| $vhf
;
$point_w_type :
$waypoint_w_type
| $vor_w_type
| $dme_w_type
| $ndb_w_type
| $airport_w_type
| $holding_w_type
| $approach_w_type
| $intersections_w_type
| $vhf_w_type
;
$nt_point :
$nt_waypoint
| $nt_vor
| $nt_dme
| $nt_ndb
| $nt_airport
| $nt_holding
| $nt_approach
| $nt_intersections
| $nt_vhf
;
$nt_point_w_type :
$nt_waypoint_w_type
| $nt_vor_w_type
| $nt_dme_w_type
| $nt_ndb_w_type
| $nt_airport_w_type
| $nt_holding_w_type
| $nt_approach_w_type
| $nt_intersections_w_type
| $nt_vhf_w_type
;
$sid :
ridar
;
$star : (landu
| betos
| rokil
| napsa)
;
## base single_digits file
#tagged numbers:
$n0 : zero | oh;
$n1 : one;
$n2 : two;
$n3 : three;
$n4 : four;
$n5 : five;
$n6 : six;
$n7 : seven;
$n8 : eight;
$n9 : nine | niner;
$n10 : ten;
$n11 : eleven;
$n12 : twelve;
$n13 : thirteen;
$n14 : fourteen;
$n15 : fifteen;
$n16 : sixteen;
$n17 : seventeen;
$n18 : eighteen;
$n19 : nineteen;
$n20 : twenty;
$n30 : thirty;
$n40 : forty;
$n50 : fifty;
$n60 : sixty;
$n70 : seventy;
$n80 : eighty;
$n90 : ninety;
# untagged numbers:
$nt0 : zero | oh;
$nt1 : one;
$nt2 : two;
$nt3 : three;
$nt4 : four;
$nt5 : five;
$nt6 : six;
$nt7 : seven;
$nt8 : eight;
$nt9 : nine | niner;
$nt10 : ten;
$nt11 : eleven;
$nt12 : twelve;
$nt13 : thirteen;
$nt14 : fourteen;
$nt15 : fifteen;
$nt16 : sixteen;
$nt17 : seventeen;
$nt18 : eighteen;
$nt19 : nineteen;
$nt20 : twenty;
$nt30 : thirty;
$nt40 : forty;
$nt50 : fifty;
$nt60 : sixty;
$nt70 : seventy;
$nt80 : eighty;
$nt90 : ninety;
$speed : $mach | $knot ;
$nt_speed : $nt_mach | $nt_knot ;
$mach :
mach [number] (point | decimal) $d59 $digit
;
$nt_mach :
mach [number] (point | decimal) $nt_d59 $nt_digit
;
$knot :
( nine | niner | $d15 $digit | six zero) (zero | five)
| $d16 hundred | $d15 $tens | ninety | ninety five
;
$nt_knot :
( nine | niner | ninety | $nt_d15 $nt_digit | six zero) (zero | five)
| $nt_d16 hundred | $nt_d15 $nt_tens | ninety | ninety five
;
$relspeed :
$d14 $n0 [knots]
;

